On systems that support -isystem, CMAKE turns all include paths returned from
pkg-config from -I foo to -isystem foo, for the sake of suppressing warnings.
unfortunately this breaks C++ headers #include_next include order.

/include/c++/6.3.0/cstdlib:75:25: fatal error: stdlib.h: No such file or directory
 #include_next <stdlib.h>
                         ^
this happens when -I /include ends up in the pkg-config output. the cmake
devs argue that pkg-config should never return the default include dir.
I argue that they shouldn't mess around with the system include dir order.

diff --git a/Modules/Compiler/Clang.cmake b/Modules/Compiler/Clang.cmake
index 96263fc..f7bb5c2 100644
--- a/Modules/Compiler/Clang.cmake
+++ b/Modules/Compiler/Clang.cmake
@@ -18,7 +18,8 @@ else()
   macro(__compiler_clang lang)
     __compiler_gnu(${lang})
     set(CMAKE_${lang}_COMPILE_OPTIONS_PIE "-fPIE")
-    set(CMAKE_INCLUDE_SYSTEM_FLAG_${lang} "-isystem ")
+    set(CMAKE_INCLUDE_SYSTEM_FLAG_C)
+    set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX)
     set(CMAKE_${lang}_COMPILE_OPTIONS_VISIBILITY "-fvisibility=")
     if(CMAKE_${lang}_COMPILER_VERSION VERSION_LESS 3.4.0)
       set(CMAKE_${lang}_COMPILE_OPTIONS_TARGET "-target ")
diff --git a/Modules/Compiler/GNU.cmake b/Modules/Compiler/GNU.cmake
index b67002c..a690289 100644
--- a/Modules/Compiler/GNU.cmake
+++ b/Modules/Compiler/GNU.cmake
@@ -43,6 +43,7 @@ macro(__compiler_gnu lang)
   set(CMAKE_${lang}_CREATE_PREPROCESSED_SOURCE "<CMAKE_${lang}_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -E <SOURCE> > <PREPROCESSED_SOURCE>")
   set(CMAKE_${lang}_CREATE_ASSEMBLY_SOURCE "<CMAKE_${lang}_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -S <SOURCE> -o <ASSEMBLY_SOURCE>")
   if(NOT APPLE OR NOT CMAKE_${lang}_COMPILER_VERSION VERSION_LESS 4) # work around #4462
-    set(CMAKE_INCLUDE_SYSTEM_FLAG_${lang} "-isystem ")
+    set(CMAKE_INCLUDE_SYSTEM_FLAG_C)
+    set(CMAKE_INCLUDE_SYSTEM_FLAG_CXX)
   endif()
 endmacro()
